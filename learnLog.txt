1. opengl es API 命名规范
	1.1 定义的常量都以GL_为前缀。比如GL10.GL_COLOR_BUFFER_BIT
    1.2 OpenGL ES 指令以gl开头 ，比如gl.glClearColor
	1.3 某些OpenGL指令以3f 或4f结尾，3和4代表参数的个数,f代表参数类型为浮点数,如gl.glColor4f ，i,x 代表 int如 gl.glColor4x
	1.4 对应以v结尾的OpenGL ES 指令，代表参数类型为一个矢量(Vector) ，如 glTexEnvfv
	1.5 所有8-bit整数对应到byte 类型，16-bit 对应到short类型,32-bit整数(包括GLFixed)对应到int类型，而所有32-bit 浮点数对应到float 类型。
    GL_TRUE,GL_FALSE 对应到boolean类型
    1.6 C字符串((char*)) 对应到Java 的 UTF-8 字符串。
2. 管道
	2.1	大部分图形系统都可以比作工厂中的装配线(Assemble line)或者称为管道(Pipeline)。
	2.2 OpenGL ES 1.x 的工序是固定的，称为Fix-Function Pipeline,可以想象一个带有很多控制开关的机器，尽管加工的工序是固定的，但是可以通过打开或关闭开关来设置参数或者打开关闭某些功能。
	OpenGL ES 2.0 允许提供编程来控制一些重要的工序，一些“繁琐”的工序比如栅格化等仍然是固定的。
	2.3 opengles1.X固定管道的处理流程见“opengles_1.x_固定管道结构图.png”，详细说明如下：
		2.3.1 管道“工序”大致可以分为 Transformation Stage 和 Rasterization Stage两大步。
    	2.3.2 OpenGL ES 支持的基本图形为 点Point, 线Line, 和三角形Triangle ，其它所有复制图形都是通过这几种基本几何图形组合而成。
    	2.3.3 在发出绘图指令后，会对顶点(Vertices)数组进行指定的坐标变换或光照处理。
    	2.3.4 顶点处理完成后，通过Rasterizer 来生成像素信息，称为”Fragments“ 。
    	2.3.5 对于Fragment 在经过Texture Processing, Color Sum ,Fog 等处理并将最终处理结果存放在内存中（称为FrameBuffer)。
    	2.3.6 OpenGL 2.0可以通过编程来修改蓝色的步骤，称为Programmable Shader.
3. opengles 基本图形
	3.1 OpenGL ES 支持绘制的基本几何图形分为三类：点，线段，三角形。也就是说OpenGL ES 只能绘制这三种基本几何图形。任何复杂的2D或是3D图形都是通过这三种几何图形构造而成的。
	比如下图复杂的3D图形，都有将其分割成细小的三角形面而构成的。然后通过上色(Color)，添加材质(Texture)，再添加光照（lighting)，构造3D效果的图形：	
4. 使用3D建模，由OpenGL ES库来完成从3D模型到二维屏幕上的显示。这个过程可以分成三个部分：
	4.1 坐标变换，坐标变换通过使用变换矩阵来描述，因此学习3D绘图需要了解一些空间几何，矩阵运算的知识。三维坐标通常使用齐次坐标来定义。变换矩阵操作可以分为视角（Viewing），模型（Modeling）和投影（Projection）操作，这些操作可以有选择，平移，缩放，正侧投影，透视投影等。
	4.2 由于最终的3D模型需要在一个矩形窗口中显示，因此在这个窗口之外的部分需要裁剪掉以提高绘图效率，对应3D图形，裁剪是将处在剪切面之外的部分扔掉。
	4.3 在最终绘制到显示器（2D屏幕），需要建立起变换后的坐标和屏幕像素之间的对应关系，这通常称为“视窗”坐标变换(Viewport) transformation.
5. 	图“opengles_坐标变换过程1.png”为Android OpenGL ES坐标变换的过程：
    5.1 Object Coordinate System: 也称作Local coordinate System，用来定义一个模型本身的坐标系。
    5.2 World Coordinate System: 3d 虚拟世界中的绝对坐标系，定义好这个坐标系的原点就可以用来描述模型的实现的位置，Camera 的位置，光源的位置。
    5.3 View Coordinate System: 一般使用用来计算光照效果。
    5.4 Clip Coordinate System:  对3D场景使用投影变换裁剪视锥。
    5.5 Normalized device coordinate System (NDC): 规范后坐标系。
    5.6 Windows Coordinate System: 最后屏幕显示的2D坐标系统，一般原点定义在屏幕左上角。
	结合图“opengles_坐标变换过程2.png”对比理解，
	对于Viewing transformation (平移，选择相机）和Modeling transformation（平移，选择模型）可以合并起来看，只是应为向左移动相机，和相机不同将模型右移的效果是等效的。
6.  矩阵变换
	6.1 ModelViewMatrix变换矩阵，Viewing和Modeling 变换关系紧密，对应到相机拍照为放置三角架和调整被拍物体位置及角度，通常将这两个变换使用一个modelview 变换矩阵来定义
	6.2 ProjectionMatrix投影变换矩阵OpenGL ES可以使用两种不同的投影变换：透视投影（Perspective Projection）和正侧投影（Orthographic Projection）。	
	6.3 ViewPort（显示区域）为一个长方形区域，并且使用屏幕坐标系来定义
7.	光照效果
	7.1 Emitted ： 一般只发光物体或者光源，这种光不受其它光源的影响。

	7.2 ambient: 指光线经过多次反射后已经无法得知其方向（可以看作来自所有方向），可以成为环境光，该光源如果射到某个平面，其反射方向为所有方向。Ambient 不依赖于光源的方向。

	7.3 diffuse:当一束平行的入射光线射到粗糙的表面时，因面上凹凸不平，所以入射线虽然互相平行，由于各点的法线方向不一致，造成反射光线向不同的方向无规则地反射，这种反射称之为“漫反射”或“漫射”。这个反射的光则称为漫射光。漫射光射到某个平面时，其反射方向也为所有方向。diffuse 只依赖于光源的方向和法线的方向。

	7.4 specular ： 一般指物体被光源直射的高亮区域，也可以成为镜面反射区，如金属。specular依赖于光源的方向，法线的方向和视角的方向。
8.	光源
	penGL ES光源可以分为
	8.1 平行光源(Parallel light source), 代表由位于无限远处均匀发光体，太阳可以近似控制平行光源。
	8.2 点光源(Spot light source)  如灯泡就是一个点光源，发出的光可以指向360度，可以为点光源设置光衰减属性（attenuation)或者让点光源只能射向某个方向（如射灯）。
	8.3 可以为图形的不同部分设置不同的光源。
9.	参数设置
	1.1. 平行光将GL_POSITION的(x,y,z,w)中的w 设为0.0，(x,y,z)为平行光的方向：
	1.2. 对于点光源，将 w 设成非0值，通常设为1.0. (x,y,z)为点光源的坐标位置。
	1.3. 将点光源设置成聚光灯，需要同时设置GL_SPOT_DIRECTION,GL_SPOT_CUTOFF等 参数，GL_POSITION的设置和点光源类似：将 w 设成非0值，
	 通常设为1.0. (x,y,z)为点光源的坐标位置。而对于GL_SPOT_DIRECTION 参数，设置聚光的方向(x,y,z)
	1.4. GL_SPOT_CUTOFF 参数设置聚光灯发散角度（0到90度）
	1.5. GL_SPOT_EXPONENT 给出了聚光灯光源汇聚光的程度，值越大，则聚光区域越小（聚光能力更强）。
	1.6. 对应点光源（包括聚光灯），其它几个参数GL_CONSTANT_ATTENUATION,  GL_LINEAR_ATTENUATION,  GL_QUADRATIC_ATTENUATION 
	 为点光源设置光线衰减参数，	
10. 物体表面材料(Material)的反光属性
	10.1 face : 在OpenGL ES中只能使用GL_FRONT_AND_BACK，表示修改物体的前面和后面的材质光线属性。
    10.2 pname: 参数类型，可以有GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_EMISSION, GL_SHININESS。这些参数用在光照方程。
    10.3 param：  参数的值。
	其中GL_AMBIENT,GL_DIFFUSE,GL_SPECULAR ，GL_EMISSION为颜色RGBA值，GL_SHININESS 值可以从0到128，值越大，光的散射越小：
	10.4 方法glLightModleXX给出了光照模型的参数
		public void glLightModelf(int pname,float param)
		public void glLightModelfv(int pname,float[] params,int offset)
		public void glLightModelfv(int pname,FloatBuffer params)
    pname: 参数类型，可以为GL_LIGHT_MODEL_AMBIENT和GL_LIGHT_MODEL_TWO_SIDE
    params: 参数的值。
	最终顶点的颜色由这些参数（光源，材质光学属性，光照模型）综合决定（光照方程计算出）。