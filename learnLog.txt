1. opengl es API 命名规范
	1.1 定义的常量都以GL_为前缀。比如GL10.GL_COLOR_BUFFER_BIT
    1.2 OpenGL ES 指令以gl开头 ，比如gl.glClearColor
	1.3 某些OpenGL指令以3f 或4f结尾，3和4代表参数的个数,f代表参数类型为浮点数,如gl.glColor4f ，i,x 代表 int如 gl.glColor4x
	1.4 对应以v结尾的OpenGL ES 指令，代表参数类型为一个矢量(Vector) ，如 glTexEnvfv
	1.5 所有8-bit整数对应到byte 类型，16-bit 对应到short类型,32-bit整数(包括GLFixed)对应到int类型，而所有32-bit 浮点数对应到float 类型。
    GL_TRUE,GL_FALSE 对应到boolean类型
    1.6 C字符串((char*)) 对应到Java 的 UTF-8 字符串。
2. 管道
	2.1	大部分图形系统都可以比作工厂中的装配线(Assemble line)或者称为管道(Pipeline)。
	2.2 OpenGL ES 1.x 的工序是固定的，称为Fix-Function Pipeline,可以想象一个带有很多控制开关的机器，尽管加工的工序是固定的，但是可以通过打开或关闭开关来设置参数或者打开关闭某些功能。
	OpenGL ES 2.0 允许提供编程来控制一些重要的工序，一些“繁琐”的工序比如栅格化等仍然是固定的。
	2.3 opengles1.X固定管道的处理流程见“opengles_1.x_固定管道结构图.png”，详细说明如下：
		2.3.1 管道“工序”大致可以分为 Transformation Stage 和 Rasterization Stage两大步。
    	2.3.2 OpenGL ES 支持的基本图形为 点Point, 线Line, 和三角形Triangle ，其它所有复制图形都是通过这几种基本几何图形组合而成。
    	2.3.3 在发出绘图指令后，会对顶点(Vertices)数组进行指定的坐标变换或光照处理。
    	2.3.4 顶点处理完成后，通过Rasterizer 来生成像素信息，称为”Fragments“ 。
    	2.3.5 对于Fragment 在经过Texture Processing, Color Sum ,Fog 等处理并将最终处理结果存放在内存中（称为FrameBuffer)。
    	2.3.6 OpenGL 2.0可以通过编程来修改蓝色的步骤，称为Programmable Shader.
3. opengles 基本图形
	3.1 OpenGL ES 支持绘制的基本几何图形分为三类：点，线段，三角形。也就是说OpenGL ES 只能绘制这三种基本几何图形。任何复杂的2D或是3D图形都是通过这三种几何图形构造而成的。
	比如下图复杂的3D图形，都有将其分割成细小的三角形面而构成的。然后通过上色(Color)，添加材质(Texture)，再添加光照（lighting)，构造3D效果的图形：	
	
	

